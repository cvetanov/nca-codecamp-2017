type Task {
    id: ID!
    name: String!
    description: String
    priority: Priority
    taskStatus: TaskStatus
}

type Project {
    id: ID!
    name: String!
    description: String
    tasks: [Task]
}

input TaskInput {
    name: String!
    description: String
    priority: Priority
    taskStatus: TaskStatus
}
input TaskInputUpdatable {
    id: ID!
    name: String
    description: String
    priority: Priority
    taskStatus: TaskStatus
}
input ProjectInputUpdatable {
    id: ID!
    name: String
    description: String
}

input ProjectInput {
    name: String!
    description: String
    tasks: [TaskInput]
}


type Query {
    projects: [Project]
    project(id: ID!): Project
    tasks: [Task]
}

type Mutation {
    addTask(task: TaskInput): Task
    addProject(project: ProjectInput): Project
    addTaskToProject(task: TaskInput,projectId: Long): Project
    updateTask(updatable: TaskInputUpdatable) : Task
    updateProject(updatable: ProjectInputUpdatable) : Project
}

enum Priority{
    PRIORITY1,
    PRIORITY2,
    PRIORITYDEFAULT,
    DEADLINE
}

enum TaskStatus {
    CREATED,
    LINED_UP,
    SCHEDULED,
    COMPLETED,
    ARCHIVED
}
schema {
    query: Query
    mutation: Mutation
}

